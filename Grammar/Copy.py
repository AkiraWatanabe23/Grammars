#「copy」「deepcopy」の違いについて記述
import copy

a = [1, 2, [3, 4]]
print(type(a)) # -> <class 'list'>

"""
浅いコピー ... 多次元リスト等の「深い要素」が存在し、その「深い要素」を変更する場合にコピー先と連動するもの
              一般的な一次元リストの場合はcopy()で値渡しができる
深いコピー ... リストの深さに関係なく、それぞれが独立している(コピー先とは連動しない)
              それぞれが完全に独立しているため、多次元リストの値渡しが可能
"""

#以下の書式で、浅いコピーを取得できる
c = copy.copy(a)
print (c) # -> [1, 2, [3, 4]]
#aをコピーできている

a[0] = 4
a[2][0] = 0

print(a) # -> [4, 2, [0, 4]]
print(c) # -> [1, 2, [0, 4]]
#↑「浅い部分」の変更は連動しないが、「深い部分」の変更は連動される

#深いコピーの取得
d = copy.deepcopy(a)

a [0] = 3
a [2][1] = 6

print(a) # -> [3, 2, [0, 6]]
print(d) # -> [4, 2, [0, 4]]
#それぞれが独立しているため、片方の変更が他方に反映されない